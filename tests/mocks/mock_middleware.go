// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockreporter is a mock of reporter interface
type Mockreporter struct {
	ctrl     *gomock.Controller
	recorder *MockreporterMockRecorder
}

// MockreporterMockRecorder is the mock recorder for Mockreporter
type MockreporterMockRecorder struct {
	mock *Mockreporter
}

// NewMockreporter creates a new mock instance
func NewMockreporter(ctrl *gomock.Controller) *Mockreporter {
	mock := &Mockreporter{ctrl: ctrl}
	mock.recorder = &MockreporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockreporter) EXPECT() *MockreporterMockRecorder {
	return m.recorder
}

// ObserverHistogram mocks base method
func (m *Mockreporter) ObserverHistogram(name string, value float64, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ObserverHistogram", varargs...)
}

// ObserverHistogram indicates an expected call of ObserverHistogram
func (mr *MockreporterMockRecorder) ObserverHistogram(name, value interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserverHistogram", reflect.TypeOf((*Mockreporter)(nil).ObserverHistogram), varargs...)
}

// ObserverSummary mocks base method
func (m *Mockreporter) ObserverSummary(name string, value float64, labels ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, value}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ObserverSummary", varargs...)
}

// ObserverSummary indicates an expected call of ObserverSummary
func (mr *MockreporterMockRecorder) ObserverSummary(name, value interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, value}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserverSummary", reflect.TypeOf((*Mockreporter)(nil).ObserverSummary), varargs...)
}
