// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	repository "github.com/TaylorOno/bookmarker/service/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookmarkRepository is a mock of BookmarkRepository interface
type MockBookmarkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkRepositoryMockRecorder
}

// MockBookmarkRepositoryMockRecorder is the mock recorder for MockBookmarkRepository
type MockBookmarkRepositoryMockRecorder struct {
	mock *MockBookmarkRepository
}

// NewMockBookmarkRepository creates a new mock instance
func NewMockBookmarkRepository(ctrl *gomock.Controller) *MockBookmarkRepository {
	mock := &MockBookmarkRepository{ctrl: ctrl}
	mock.recorder = &MockBookmarkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookmarkRepository) EXPECT() *MockBookmarkRepositoryMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method
func (m *MockBookmarkRepository) CreateBookmark(ctx context.Context, bookmark repository.UserBookmark) (repository.UserBookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", ctx, bookmark)
	ret0, _ := ret[0].(repository.UserBookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark
func (mr *MockBookmarkRepositoryMockRecorder) CreateBookmark(ctx, bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkRepository)(nil).CreateBookmark), ctx, bookmark)
}

// GetBookmark mocks base method
func (m *MockBookmarkRepository) GetBookmark(ctx context.Context, user, book string) (repository.UserBookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmark", ctx, user, book)
	ret0, _ := ret[0].(repository.UserBookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmark indicates an expected call of GetBookmark
func (mr *MockBookmarkRepositoryMockRecorder) GetBookmark(ctx, user, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmark", reflect.TypeOf((*MockBookmarkRepository)(nil).GetBookmark), ctx, user, book)
}

// GetBookmarks mocks base method
func (m *MockBookmarkRepository) GetBookmarks(ctx context.Context, user string, filter string, limit int) ([]repository.UserBookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarks", ctx, user, filter, limit)
	ret0, _ := ret[0].([]repository.UserBookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarks indicates an expected call of GetBookmarks
func (mr *MockBookmarkRepositoryMockRecorder) GetBookmarks(ctx, user, filter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockBookmarkRepository)(nil).GetBookmarks), ctx, user, filter, limit)
}

// UpdateBookmark mocks base method
func (m *MockBookmarkRepository) UpdateBookmark(ctx context.Context, bookmark repository.UserBookmark) (repository.UserBookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookmark", ctx, bookmark)
	ret0, _ := ret[0].(repository.UserBookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookmark indicates an expected call of UpdateBookmark
func (mr *MockBookmarkRepositoryMockRecorder) UpdateBookmark(ctx, bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookmark", reflect.TypeOf((*MockBookmarkRepository)(nil).UpdateBookmark), ctx, bookmark)
}

// DeleteBookmark mocks base method
func (m *MockBookmarkRepository) DeleteBookmark(ctx context.Context, user, book string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmark", ctx, user, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookmark indicates an expected call of DeleteBookmark
func (mr *MockBookmarkRepositoryMockRecorder) DeleteBookmark(ctx, user, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmark", reflect.TypeOf((*MockBookmarkRepository)(nil).DeleteBookmark), ctx, user, book)
}
